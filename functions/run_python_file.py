import os
import subprocess
from google.genai import types

def run_python_file(working_directory, file_path):
    if file_path.startswith(("../", "/")):
        return f'Error: Cannot execute "{file_path}" as it is outside the permitted working directory'
    abspath = os.path.abspath(os.path.join(working_directory, file_path))
    if not os.path.exists(abspath) :
        return f'Error: File "{file_path}" not found.'
    if not file_path.endswith(".py"):
        return f'Error: "{file_path}" is not a Python file.'
    try:
        output = subprocess.run(["python", abspath],timeout=30,capture_output=True)
        if output.stdout.decode() == "" and output.stderr.decode() == "":
            return "No output produced." + output.stdout.decode()
        result = f'STDOUT: {output.stdout.decode()}\nSTDERR: {output.stderr.decode()}'
        if output.returncode != 0:
            result += f'\nProcess exited with code: {output.returncode}'
        return result
    except Exception as e:
        return f"Error: executing Python file: {e}"
    
schema_run_python_file = types.FunctionDeclaration(
    name="run_python_file",
    description="Runs a python file specified by the file path provided relative to the working directory. constrained to the working directory. Returns the output generated by the file combined with eventual errors, all in one string.",
    parameters=types.Schema(
        type=types.Type.OBJECT,
        properties={
            "file_path": types.Schema(
                type=types.Type.STRING,
                description="The file to run, relative to the working directory. Must be provided.",
            ),
        },
    ),
)